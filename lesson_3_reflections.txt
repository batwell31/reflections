1) When would you want to create a remote repository rather than keeping all your work local?

    You would want to make it remote if you want to share your work, and get feedback.  
    Also, anytime you're in a group project it would need to be remote.

2) Why might you want to always pull changes manually rather than having Git automatically 
   stay up-to-date with your remote repository?

        Doing it manually gives you more control, and would cut down on Git making mistakes, or 
        errors, or bugs.

3) Describe the differences between forks, clones, and branches. When would you use one instead of another?

        Forks:
            - are made when you clone a repository from github to your github acount.

        Clones:
            - are made when you clone a repository from github, or off of a local repository to your local repository.

        Branches:
            - branches navigate through your project, and can even be merged.  They can be for experimental use, or
              if you want to make a different version of the same game.  You can create a different branch.  The main branch
              is called master.  You have to manually make new branches.  if a branch gets deleted you lose the commits unless
              they are obtainable through another branch.

4) What is the benefit of having a copy of the last known state of the remote stored locally?  

        You can work on it offline, and see all the changes that were made.  Also you could make your own changes.

5) How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

        I guess you could email eachother a ZIP file of the project you were working on, and share it that way.
        It would probably be easier to just send a file, and be done with it.
        In terms of it being harder, I suppose that it would be harder to merge those changes, and keep track of bugs.

6) When would you want to make changes in a separate branch rather than directly in master? 
   What benefits does each approach have?
  
        If you were wanting to make a pull request, or you wanted to make changes without messing up the master.
        If someone wanted to merge into a pull request they would want to see how you resolved a problem, and decide
        if they would want to merge their master branch into your branch.